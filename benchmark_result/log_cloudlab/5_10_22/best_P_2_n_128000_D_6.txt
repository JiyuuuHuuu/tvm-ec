Lowered TIR:
@main = primfn(A_1: handle, B_1: handle, bitmul_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {bitmul: Buffer(bitmul_2: Pointer(uint8), uint8, [16, 128000], []),
             B: Buffer(B_2: Pointer(uint8), uint8, [48, 128000], []),
             A: Buffer(A_2: Pointer(uint8), uint8, [16, 48], [])}
  buffer_map = {A_1: A, B_1: B, bitmul_1: bitmul} {
  allocate(auto_scheduler_layout_transform: Pointer(global uint8), uint8, [6144000]), storage_scope = global {
    for (ax0.ax1.fused.ax2.fused: int32, 0, 400) "parallel" {
      for (ax4: int32, 0, 24) {
        for (ax5: int32, 0, 5) {
          for (ax6: int32, 0, 2) {
            for (ax7: int32, 0, 64) {
              auto_scheduler_layout_transform[(((((ax0.ax1.fused.ax2.fused*15360) + (ax4*640)) + (ax5*128)) + (ax6*64)) + ax7)] = (uint8*)B_2[(((((ax4*256000) + (ax6*128000)) + (ax0.ax1.fused.ax2.fused*320)) + (ax5*64)) + ax7)]
            }
          }
        }
      }
    }
    for (i.outer.outer.j.outer.outer.fused: int32, 0, 200) "parallel" {
      allocate(bitmul.local: Pointer(local uint8), uint8, [320]), storage_scope = local;
      for (i.outer.inner: int32, 0, 16) {
        for (j.outer.inner: int32, 0, 2) {
          for (j.c.outer.inner.init: int32, 0, 5) {
            bitmul.local[ramp((j.c.outer.inner.init*64), 1, 64)] = broadcast(0u8, 64)
          }
          for (k.outer: int32, 0, 24) {
            for (j.c.outer.inner: int32, 0, 5) {
              for (k.inner: int32, 0, 2) {
                let cse_var_1: int32 = (j.c.outer.inner*64)
                bitmul.local[ramp(cse_var_1, 1, 64)] = @tir.bitwise_xor((uint8x64*)bitmul.local[ramp(cse_var_1, 1, 64)], @tir.bitwise_and(broadcast((uint8*)A_2[(((i.outer.inner*48) + (k.outer*2)) + k.inner)], 64), (uint8x64*)auto_scheduler_layout_transform[ramp((((((i.outer.outer.j.outer.outer.fused*30720) + (j.outer.inner*15360)) + (k.outer*640)) + (j.c.outer.inner*128)) + (k.inner*64)), 1, 64)], dtype=uint8x64), dtype=uint8x64)
              }
            }
          }
          bitmul_2[ramp((((i.outer.inner*128000) + (i.outer.outer.j.outer.outer.fused*640)) + (j.outer.inner*320)), 1, 320)] = (uint8x320*)bitmul.local[ramp(0, 1, 320)]
        }
      }
    }
  }
}